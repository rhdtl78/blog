"use strict";(self.webpackChunkrhdtl_78_github_io=self.webpackChunkrhdtl_78_github_io||[]).push([[2674],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var a=n(7294);function p(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){p(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,p=function(e,t){if(null==e)return{};var n,a,p={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(p[n]=e[n]);return p}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(p[n]=e[n])}return p}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},k="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,p=e.mdxType,i=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),k=s(n),m=p,g=k["".concat(l,".").concat(m)]||k[m]||u[m]||i;return n?a.createElement(g,r(r({ref:t},c),{},{components:n})):a.createElement(g,r({ref:t},c))}));function g(e,t){var n=arguments,p=t&&t.mdxType;if("string"==typeof e||p){var i=n.length,r=new Array(i);r[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[k]="string"==typeof e?e:p,r[1]=o;for(var s=2;s<i;s++)r[s]=n[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1971:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var a=n(7462),p=(n(7294),n(3905));const i={title:"Spring boot TDD",description:"Spring Boot + JPA + JUnit + Mockito",slug:"/study/spring/auto-monitor",category:"Spring",tags:["Spring","Springboot","TDD","Mockito"]},r="AutoMonitor \uc911\uac04 \uc815\ub9ac",o={permalink:"/study/spring/auto-monitor",editUrl:"https://rhdtl78.github.io/study/2020-07-16-spring-auto-monitor-index.md",source:"@site/study/2020-07-16-spring-auto-monitor-index.md",title:"Spring boot TDD",description:"Spring Boot + JPA + JUnit + Mockito",date:"2020-07-16T00:00:00.000Z",formattedDate:"July 16, 2020",tags:[{label:"Spring",permalink:"/tags/spring"},{label:"Springboot",permalink:"/tags/springboot"},{label:"TDD",permalink:"/tags/tdd"},{label:"Mockito",permalink:"/tags/mockito"}],readingTime:12.04,hasTruncateMarker:!0,authors:[],frontMatter:{title:"Spring boot TDD",description:"Spring Boot + JPA + JUnit + Mockito",slug:"/study/spring/auto-monitor",category:"Spring",tags:["Spring","Springboot","TDD","Mockito"]},prevItem:{title:"[Kafka] Chapter03. \uce74\ud504\uce74 \ub514\uc790\uc778",permalink:"/study/kafka/chapter/03"},nextItem:{title:"\uc678\ubd80 \uc124\uc815",permalink:"/study/spring/external_configuration"}},l={authorsImageUrls:[]},s=[],c={toc:s},k="wrapper";function u(e){let{components:t,...n}=e;return(0,p.kt)(k,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,p.kt)("ol",null,(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("p",{parentName:"li"},"\uac1c\uc694"),(0,p.kt)("ul",{parentName:"li"},(0,p.kt)("li",{parentName:"ul"},"Spring Boot \uc2a4\ud130\ub514\ub97c \uc704\ud55c \ud504\ub85c\uc81d\ud2b8\ub85c AutoMonitor\ub97c \uac1c\ubc1c."),(0,p.kt)("li",{parentName:"ul"},"Mockito\ub97c Springboot \ud658\uacbd\uc5d0\uc11c TDD\ubc29\ubc95\ub860\uc73c\ub85c \uc811\uadfc\ud574 \uc0ac\uc6a9\ud574\ubcf4\ub294 \uac83\uc774 \ud559\uc2b5 \ubaa9\ud45c."),(0,p.kt)("li",{parentName:"ul"},"\uad81\uadf9\uc801\uc73c\ub85c, CI/CD Tool (e.g. jenkins) \ub97c \ud65c\uc6a9\ud558\uc5ec \uc790\ub3d9\ud654 \ud558\ub294 \uac83\uc774 \uac1c\ubc1c \ubaa9\ud45c.")),(0,p.kt)("p",{parentName:"li"},"AutoMonitor\ub780?"),(0,p.kt)("ul",{parentName:"li"},(0,p.kt)("li",{parentName:"ul"},"Api Testing Application"),(0,p.kt)("li",{parentName:"ul"},"\uc8fc\uc5b4\uc9c4 API\uac00 \uc8fc\uc5b4\uc9c4 payload\ub85c \uc815\uc0c1 \uc791\ub3d9\ud558\ub294\uac00\ub97c \ud655\uc778"),(0,p.kt)("li",{parentName:"ul"},"API Health checking")),(0,p.kt)("p",{parentName:"li"},"Stack"),(0,p.kt)("ul",{parentName:"li"},(0,p.kt)("li",{parentName:"ul"},"Kotlin"),(0,p.kt)("li",{parentName:"ul"},"Springboot"),(0,p.kt)("li",{parentName:"ul"},"JPA"),(0,p.kt)("li",{parentName:"ul"},"Junit"),(0,p.kt)("li",{parentName:"ul"},"Mockito"),(0,p.kt)("li",{parentName:"ul"},"Hibernate"),(0,p.kt)("li",{parentName:"ul"},"JPA"),(0,p.kt)("li",{parentName:"ul"},"Vue")),(0,p.kt)("p",{parentName:"li"},"\ud559\uc2b5 \uc804\ub7b5"),(0,p.kt)("ul",{parentName:"li"},(0,p.kt)("li",{parentName:"ul"},"TDD (Test Driven Development)"),(0,p.kt)("li",{parentName:"ul"},"\ub808\uc774\uc5b4 \ubcc4\ub85c Mock-up"),(0,p.kt)("li",{parentName:"ul"},"\ud56d\uc0c1 Test Case\ub97c \uba3c\uc800 \uc791\uc131\ud560 \uac83")),(0,p.kt)("p",{parentName:"li"},"\ud658\uacbd \uc124\uc815\uc5d0 \ub300\ud55c \uc124\uba85\uc740 \uc0dd\ub7b5.")),(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("p",{parentName:"li"},"Test Driven Development"),(0,p.kt)("p",{parentName:"li"},"TDD\ub780? "),(0,p.kt)("blockquote",{parentName:"li"},(0,p.kt)("p",{parentName:"blockquote"},"\ud14c\uc2a4\ud2b8 \uc8fc\ub3c4 \uac1c\ubc1c(Test-driven development TDD)\uc740 \ub9e4\uc6b0 \uc9e7\uc740 \uac1c\ubc1c \uc0ac\uc774\ud074\uc744 \ubc18\ubcf5\ud558\ub294 \uc18c\ud504\ud2b8\uc6e8\uc5b4 \uac1c\ubc1c \ud504\ub85c\uc138\uc2a4 \uc911 \ud558\ub098\uc774\ub2e4.\n\uac1c\ubc1c\uc790\ub294 \uba3c\uc800 \uc694\uad6c\uc0ac\ud56d\uc744 \uac80\uc99d\ud558\ub294 \uc790\ub3d9\ud654\ub41c \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\ub97c \uc791\uc131\ud55c\ub2e4. \uadf8\ub7f0 \ud6c4\uc5d0, \uadf8 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\ub97c \ud1b5\uacfc\ud558\uae30 \uc704\ud55c \ucd5c\uc18c\ud55c\uc758 \ucf54\ub4dc\ub97c \uc0dd\uc131\ud55c\ub2e4.\n\ub9c8\uc9c0\ub9c9\uc73c\ub85c \uc791\uc131\ud55c \ucf54\ub4dc\ub97c \ud45c\uc900\uc5d0 \ub9de\ub3c4\ub85d \ub9ac\ud329\ud1a0\ub9c1\ud55c\ub2e4.\n\uc774 \uae30\ubc95\uc744 \uac1c\ubc1c\ud588\uac70\ub098 '\uc7ac\ubc1c\uacac' \ud55c \uac83\uc73c\ub85c \uc778\uc815\ub418\ub294 Kent Beck\uc740 2003\ub144\uc5d0 TDD\uac00 \ub2e8\uc21c\ud55c \uc124\uacc4\ub97c \uc7a5\ub824\ud558\uace0 \uc790\uc2e0\uac10\uc744 \ubd88\uc5b4\ub123\uc5b4\uc900\ub2e4\uace0 \ub9d0\ud558\uc600\ub2e4.\n-- Wiki\uc5d0\uc11c \ubc1c\ucdcc ",(0,p.kt)("a",{parentName:"p",href:"https://ko.wikipedia.org/wiki/%ED%85%8C%EC%8A%A4%ED%8A%B8_%EC%A3%BC%EB%8F%84_%EA%B0%9C%EB%B0%9C"},"\ub9c1\ud06c"))),(0,p.kt)("p",{parentName:"li"},"\uc8fc\ubaa9\ud560 \uac83\uc740 '\uba3c\uc800 \uc694\uad6c\uc0ac\ud56d\uc744 \uac80\uc99d\ud558\ub294 \uc790\ub3d9\ud654\ub41c \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\ub97c \uc791\uc131\ud55c\ub2e4.' \uc774\ub2e4.\n\ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4 \uc790\uccb4\uac00 \uae30\ub2a5 \uba85\uc138\uac00 \ub418\uace0, \ud504\ub85c\uadf8\ub7a8\uc758 \uccad\uc0ac\uc9c4\uc774 \ub41c\ub2e4."),(0,p.kt)("ol",{parentName:"li"},(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("p",{parentName:"li"},"JPA Repository Mocking"),(0,p.kt)("p",{parentName:"li"},"\ud14c\uc2a4\ud2b8\uc758 \ubaa9\uc801\uc740 \uc791\uc131\ud55c Entity\ub97c \uc0ac\uc6a9\ud55c JpaRepository\ub97c Mock-up \ud574\ubcf4\uae30 \uc704\ud568\uc774\ub2e4."),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-kotlin"},"/* Test Case */\n@RunWith(MockitoJUnitRunner::class) // Mockito runner\nclass ApiSpecJpaRepositoryTest {\n    @Mock\n    lateinit var apiSpecJpaRepository: ApiSpecJpaRepository; // jpaRepository\ub97c Mockito\ub85c Mock-up\n\n    @InjectMocks\n    lateinit var apiSpecRepository: ApiSpecRepository; // jpaRepository\ub97c \uc774\uc6a9\ud55c Respository. apiSpecJpaRepository\ub97c \uc758\uc874 \uac1d\uccb4\ub85c \uac16\ub294\ub2e4.\n\n    @BeforeAll\n    fun setUp() { // Mockito\uc758 \uc5b4\ub178\ud14c\uc774\uc158\uc744 \uc2e4\ud589.\n        MockitoAnnotations.initMocks(this);\n    }\n}\n")),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-kotlin"},"/* JPA Repository */\n@Repository\ninterface ApiSpecJpaRepository: JpaRepository<ApiSpec, Long>\n")),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-kotlin"},"/* Repository */\n@Repository\nclass ApiSpecRepository(\n        val jpaApiSpecRepository: ApiSpecJpaRepository\n)\n")),(0,p.kt)("p",{parentName:"li"},"MockitoRunner\uac00 \uc758\uc874\uc131\uc744 \uc8fc\uc785\ud574\uc8fc\uba70 Mock-up\uc744 \ub9cc\ub4e4\uc5b4 \uc900\ub2e4. \uc704 \ud14c\uc2a4\ud2b8 \ud074\ub798\uc2a4\uc5d0\uc11c\ub294 apiSpecJpaRepository\uac00 Mock-up \uac1d\uccb4\uac00 \ub418\uba70 \uc774\ub97c apiSpecRepository\uac00 \uc0ac\uc6a9\ud55c\ub2e4."),(0,p.kt)("p",{parentName:"li"},"\ub4f1\ub85d\ub41c API\ub97c \uc870\ud68c\ud558\ub294 \uae30\ub2a5\uc744 \uad6c\ud604\ud558\uace0\uc790 \ud55c\ub2e4. \uc774 \ub54c, Respository\uc5d0 \ud574\ub2f9 \uae30\ub2a5\uc744 \ubc14\ub85c \uad6c\ud604\ud558\uc9c0 \uc54a\uace0, \uc778\ud130\ud398\uc774\uc2a4\ub9cc \ub193\uc544\ub454\ub2e4."),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-kotlin"},"/* Repository */\n@Repository\nclass ApiSpecRepository(\n        val jpaApiSpecRepository: ApiSpecJpaRepository\n) {\n    /**\n      * \ub4f1\ub85d\ub41c api \ubaa9\ub85d \uac00\uc838\uc624\uae30\n      */\n    fun getApis(page: Int): List<ApiSpec> {\n        return listOf();\n    }\n}\n")),(0,p.kt)("p",{parentName:"li"},"\uadf8\ub9ac\uace0 \ubc14\ub85c \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\ub97c \uc791\uc131\ud55c\ub2e4."),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-kotlin"},'/* Test Case */\nclass ApiSpecJpaRepositoryTest {\n    ...\n\n    private fun mockResultList(size: Long): List<ApiSpec> {\n        return LongStream\n                .range(0, size)\n                .mapToObj {\n                    val mocked = mock<ApiSpec>(); // Mock-up\n                    // Data mocking\n                    whenever(mocked.id).thenReturn(it + 1);\n                    whenever(mocked.alias).thenReturn("Test Api - ${it + 1}");\n                    whenever(mocked.url).thenReturn("/api/v1/test/${it + 1}");\n                    whenever(mocked.payload).thenReturn("{ \\"data\\": { \\"number\\": ${it + 1} } }");\n                    mocked;\n                }\n                .toList();\n    }\n\n    /**\n    * \uccab \ud398\uc774\uc9c0\uc5d0 \ud574\ub2f9\ud558\ub294 API \ubaa9\ub85d\uc744 \ubd88\ub7ec\uc628\ub2e4.\n    */\n    @Test\n    fun getApis_\ud398\uc774\uc9c0_\ubc88\ud638\ub85c_\uc870\ud68c\ud558\uae30() {\n        // when\n        val page: Int = 0;\n        val recordSize: Int = 12;\n        val paging = PageRequest.of(page, recordSize);\n\n        // mocking\n        val mockedResults = mockResultList(12)\n        val mockedPage = PageImpl<ApiSpec>(mockedResults)\n        whenever(apiSpecJpaRepository.findAll(paging))\n                .thenReturn(mockedPage);\n\n        // then\n        assertEquals(12, apiSpecRepository.getApis(page).size);\n    }\n}\n')),(0,p.kt)("p",{parentName:"li"},"\uc5ec\uae30\uc11c \uc8fc\ubaa9\ud560 \uac83\uc740 mockResultList\uc640 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\uc758 mocking\ubc29\ubc95\uc774\ub2e4."),(0,p.kt)("p",{parentName:"li"},"mockResultList\ub294 integer\ub97c \uc778\uc790\ub85c \ubc1b\uc544 \uadf8 \uac12\uc744 \ud06c\uae30\ub85c \uac16\ub294 ApiSpec\uc758 Mock-up \uac1d\uccb4\uc758 List\ub97c \ubc18\ud658\ud55c\ub2e4."),(0,p.kt)("p",{parentName:"li"},"\ub370\uc774\ud130\ub4e4\uc740 \uc2e4\uc81c \uac12\uc744 \uc9c1\uc811 \ubc14\uc778\ub4dc \ud558\uc9c0 \uc54a\uace0, Mockito\uc758 whenever\ub85c Mock-up \ub370\uc774\ud130\ub97c \uc0dd\uc131\ud55c\ub2e4."),(0,p.kt)("p",{parentName:"li"},"\ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\uc5d0\uc11c\ub294 apiSpecJpaRepository.findAll \uc758 \uacb0\uacfc\ub97c mock-up \ud55c\ub2e4."),(0,p.kt)("p",{parentName:"li"},"apiSpecJpaRepository\uc758 findAll \ud568\uc218\uc5d0 PageRequest \uc778\uc790\ub97c \ub118\uaca8\uc8fc\uc5b4 \uc2e4\ud589\ud558\uba74 12\uac1c\uc758 \uc6d0\uc18c\ub97c \uac00\uc9c4 List\uac1d\uccb4\uac00 \ubc18\ud658\ub41c\ub2e4\ub294 \uc758\ubbf8\uc774\ub2e4."),(0,p.kt)("p",{parentName:"li"},"\ubb3c\ub860 \ub370\uc774\ud130\ub294 \ubaa8\ub450 Mock-up\ub41c \uc0c1\ud0dc\uc774\ub2e4."),(0,p.kt)("p",{parentName:"li"},"\ud14c\uc2a4\ud2b8\ub97c \uc218\ud589\ud558\uba74 \ub2f9\uc5f0\ud788 \ud1b5\uacfc\ud558\uc9c0 \ubabb\ud55c\ub2e4. apiSpecRepository\uc5d0\uc11c \ud14c\uc2a4\ud2b8\ud558\ub824\ub294 getApis\uac00 \uc758\ubbf8\uc5c6\ub294 \ubc18\ud658\uc744 \ud558\uace0\uc788\uae30 \ub54c\ubb38\uc774\ub2e4."),(0,p.kt)("p",{parentName:"li"},"\uc774\uc81c \uc774 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\ub97c \ud1b5\uacfc\ud558\uae30 \uc704\ud574 ApiSpecRepository\uc758 getApis\ud568\uc218\ub97c \ub9c8\uc800 \uad6c\ud604\ud55c\ub2e4."),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Repository\nclass ApiSpecRepository(\n        val jpaApiSpecRepository: ApiSpecJpaRepository\n) {\n    val recordSize: Int = 12;\n    /**\n     * \ub4f1\ub85d\ub41c api \ubaa9\ub85d \uac00\uc838\uc624\uae30\n     */\n    fun getApis(page: Int): List<ApiSpec> {\n        val paging = PageRequest.of(page, recordSize);\n        val result: Page<ApiSpec>? = jpaApiSpecRepository.findAll(paging);\n\n        if (result != null) {\n            return result.content;\n        }\n\n        return listOf();\n    }\n}\n")),(0,p.kt)("p",{parentName:"li"},"PageRequest\ub97c \uc774\uc6a9\ud574 \ucffc\ub9ac \uacb0\uacfc\ub97c \uc81c\ud55c\ud558\uba70, \ubc18\ud658\ud560 \ub0b4\uc6a9\uc740 \ubaa8\ub450 List\ub85c \ubcc0\ud658\ud55c\ub2e4."),(0,p.kt)("p",{parentName:"li"},"\uc774\uc81c \ud14c\uc2a4\ud2b8\ub97c \ub2e4\uc2dc \uc218\ud589\ud558\uba74 \ud1b5\uacfc\ud560 \uac83\uc774\ub2e4. \ud14c\uc2a4\ud2b8\uac00 \ud1b5\uacfc\ud560 \uc218 \uc788\ub294 \uc774\uc720\ub294 \ubc14\ub85c apiSpecJpaRepository\uac00 Mock-up \ub418\uc5c8\uae30 \ub54c\ubb38\uc774\ub2e4."),(0,p.kt)("p",{parentName:"li"},"Mockito Test Runner\uac00 @Mock\uc73c\ub85c \uc9c0\uc815\ub41c \ud544\ub4dc\ub97c Mock-up\ud574\ub450\uace0, Mock-up\ub41c apiSpecJpaRepository\ub97c @InjectMocks\ub85c \uc9c0\uc815\ub41c apiSpecRepository\uc5d0 \uc758\uc874\uc131 \uc8fc\uc785\uc744 \uc2e4\ud589\ud55c\ub2e4. \ub530\ub77c\uc11c apiSpecRepository \ub0b4\ubd80\uc5d0\ub294 Mock-up\ub41c jpaRepository\uac00 \uc704\uce58\ud558\uac8c \ub418\uba70 \ub0b4\ubd80\uc5d0\uc11c apiSpecJpaRepository\ub97c \ud1b5\ud574 \uba54\uc11c\ub4dc\ub97c \ud638\ucd9c\ud560 \uc218 \uc788\uac8c \ub418\uc5c8\ub2e4."),(0,p.kt)("p",{parentName:"li"},"\ub610\ud55c, \ub0b4\ubd80\uc758 \ud568\uc218\ub97c whenever\ub85c Mock-up\ud588\uae30 \ub54c\ubb38\uc5d0 \uc2e4\uc81c Database\uc5d0 \ucffc\ub9ac\ub97c \uc9c8\uc758\ud558\uc9c0 \uc54a\uace0 \uae30\ub2a5\uc774 \ub3d9\uc791 \ud560 \uc218 \uc788\uc5c8\ub2e4."),(0,p.kt)("p",{parentName:"li"},"\uc774\ub7f0 \ubc29\ubc95\uc73c\ub85c \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\ub97c \uba3c\uc800 \uc791\uc131\ud558\uace0, \ud14c\uc2a4\ud2b8\ub97c \uc218\ud589\ud558\uace0, \uc2e4\ud328\ud55c \ud14c\uc2a4\ud2b8\uc5d0 \ub300\ud574 \ub9ac\ud329\ud130\ub9c1\uc744 \uc9c4\ud589\ud558\ub294 \uac83\uc774 TDD\uc758 \uae30\ubcf8\uc774\ub2e4.")),(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("p",{parentName:"li"},"Repository Test"),(0,p.kt)("p",{parentName:"li"},"Repository Test\uc5d0\uc11c\ub294 \ub370\uc774\ud130\uc758 \uc800\uc7a5, \uc870\ud68c\uac00 \ub0b4\uac00 \uc758\ub3c4\ud55c \ub300\ub85c \uc774\ub904\uc9c0\ub294\uc9c0\ub97c \ud655\uc778\ud574\uc57c \ud558\uae30 \ub54c\ubb38\uc5d0 \ubcc4\ub3c4\uc758 Mock-up\uc744 \ub9cc\ub4e4\uc9c0 \uc54a\ub294\ub2e4.\n\uac04\ub2e8\ud558\uac8c Save-Load Test\ub97c \uc218\ud589\ud55c\ub2e4."),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-kotlin"},'@RunWith(SpringRunner::class)\n@SpringBootTest\n@TestInstance(TestInstance.Lifecycle.PER_CLASS)\nclass ApiSpecRepositoryTest {\n\n    @Autowired\n    lateinit var apiSpecRepository: ApiSpecRepository\n\n    @BeforeAll\n    fun setUp() {\n        for (i: Int in 1..60) {\n            val data = ApiForm(\n                    url = "http://localhost/api/v1/test/$i",\n                    alias = "TestApi - $i",\n                    payload = "{ data: [] }"\n            );\n\n            apiSpecRepository.saveApi(data);\n        }\n    }\n\n    @AfterAll\n    fun cleanUp() {\n        apiSpecRepository\n                .jpaApiSpecRepository\n                .deleteAll();\n    }\n}\n')),(0,p.kt)("p",{parentName:"li"},"\uc6b0\uc120 setup\uacfc cleanUp\uc744 \uad6c\uc131\ud55c\ub2e4. \ud14c\uc2a4\ud2b8 \uc2dc\uc791 \uc804\uc5d0 \ub370\uc774\ud130\ub97c \ubbf8\ub9ac \uad6c\uc131\ud574 \ub450\uace0, \uc774\ud6c4\uc5d4 \ud14c\uc2a4\ud2b8\uc5d0 \uc0ac\uc6a9\ud55c \ubaa8\ub4e0 \ub370\uc774\ud130\ub97c \ubaa8\ub450 \uc81c\uac70\ud55c\ub2e4."),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-kotlin"},'@RunWith(SpringRunner::class)\n@SpringBootTest\n@TestInstance(TestInstance.Lifecycle.PER_CLASS)\nclass ApiSpecRepositoryTest {\n    ...\n    @Test\n    fun `saveApi - \uc0c8\ub85c\uc6b4 API \ub4f1\ub85d`() {\n        // mocking\n        val inputData = ApiForm(\n                url = "http://test/api/v1/mocked",\n                alias = "test",\n                payload = "{ \\"data\\" : \\"test\\" }"\n        );\n\n        val inserted = apiSpecRepository.saveApi(inputData);\n\n        val result = apiSpecRepository.jpaApiSpecRepository.findById(inserted.id!!).get();\n\n        Assertions.assertEquals(inputData.url, result.url);\n        Assertions.assertEquals(inputData.alias, result.alias);\n        Assertions.assertEquals(inputData.payload, result.payload);\n    }\n}\n')),(0,p.kt)("p",{parentName:"li"},"Save \ud14c\uc2a4\ud2b8\uc5d0\uc11c\ub294 \ub370\uc774\ud130\ub97c \ub123\uc5b4\ubcf4\uace0, \uc774\ub97c \ub2e4\uc2dc \uaebc\ub0b4\uc5b4 \ud655\uc778\ud558\ub294 \ubc29\uc2dd\uc73c\ub85c \ud14c\uc2a4\ud2b8\ub97c \uc9c4\ud589\ud588\ub2e4."),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-kotlin"},"@RunWith(SpringRunner::class)\n@SpringBootTest\n@TestInstance(TestInstance.Lifecycle.PER_CLASS)\nclass ApiSpecRepositoryTest {\n    ...\n    @Test\n    fun `getApi - \ub2e8\uac74 \uc870\ud68c`() {\n        // when\n        val id : Long = 1;\n\n        // then\n        val result = apiSpecRepository.getApi(id);\n        Assertions.assertNotNull(result);\n        Assertions.assertEquals(result!!.id!!, id);\n    }\n}\n")),(0,p.kt)("p",{parentName:"li"},"Load Test\uc5d0\uc120 \uae30\uc874 \uc900\ube44\ud55c \ub370\uc774\ud130\ub97c \uaebc\ub0b4\ubcf4\ub294 \ubc29\ud5a5\uc73c\ub85c \uc9c4\ud589\ud588\ub2e4.")),(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("p",{parentName:"li"},"Controller Test\nController Test\ub294 \uc55e\uc11c\uc11c \ub9cc\ub4e0 Repository\ub97c Mock-Up\ud574\uc11c \uc9c4\ud589\ud55c\ub2e4. Controller Test\uc758 \ubaa9\uc801\uc740 \ub9e4\ud551\ub41c \ud568\uc218\ub4e4\uc774 \uc81c\ub300\ub85c \ub3d9\uc791 \ud558\ub294\uc9c0\ub97c \ubcf4\uae30 \uc704\ud568\uc774\uc9c0 \ub370\uc774\ud130\ub97c \uaebc\ub0b4\uc624\ub294 \uac83\uc774 \uc81c\ub300\ub85c \ub3d9\uc791\ud558\ub294 \uac83\uc744 \ubcf4\ub294 \uac83\uc774 \uc544\ub2c8\uae30 \ub54c\ubb38\uc774\ub2e4. \uad00\uc2ec\uc0ac\ub97c \uc0dd\uac01\ud574\uc11c \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\uc640 Mock-Up \ubc94\uc704\ub97c \uacb0\uc815\ud55c\ub2e4."),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-kotlin"},'@RunWith(MockitoJUnitRunner::class)\n@SpringBootTest\n@AutoConfigureMockMvc\n@TestInstance(TestInstance.Lifecycle.PER_CLASS)\nclass DashboardControllerTest {\n    @Mock\n    lateinit var apiSpecRepository: ApiSpecRepository;\n\n    @InjectMocks\n    lateinit var dashboardController: DashboardController;\n\n    @Before\n    fun setUp() {\n        MockitoAnnotations.initMocks(this);\n    }\n\n    private fun mockResultList(size: Long): List<ApiSpec> {\n        return LongStream\n                .range(0, size)\n                .mapToObj {\n                    ApiSpec(\n                            id = it + 1,\n                            alias = "Test Api - ${it + 1}",\n                            url = "/api/v1/test/${it + 1}",\n                            payload = "{ \\"data\\": { \\"number\\": ${it + 1} } }"\n                    );\n                }\n                .toList();\n    }\n}\n')),(0,p.kt)("p",{parentName:"li"},"\uc6b0\uc120 \ud14c\uc2a4\ud2b8 \uc900\ube44\ub97c \uc704\uc640 \uac19\uc774 \ud574\ub454\ub2e4. \uc2e4\uc81c Request\ub97c \uc8fc\uace0 \ubc1b\ub294 \ud14c\uc2a4\ud2b8\ub97c \ud560 \uac83\uc774\uae30 \ub54c\ubb38\uc5d0 MockMVC\ub97c \uc0ac\uc6a9\ud55c\ub2e4. \uc55e\uc11c\uc11c \uc5b8\uae09\ud55c \ub300\ub85c apiSpecRepository\ub294 Mock-UP\ud574 \ub450\uace0 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4 \ub9c8\ub2e4 \uc608\uc0c1 \uac12\uc744 \uc815\ud55c\ub2e4. \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\ub294 \uc5d4\ud2f0\ud2f0\ub97c \uc0ac\uc6a9\ud558\uc600\ub2e4. JpaRepository\ud14c\uc2a4\ud2b8\uc640 \ub2e4\ub978 \uc810\uc740 \ub370\uc774\ud130 \uc790\uccb4\ub97c \ub2e4\uc2dc Mockito\ub85c Mock-Up\ud558\uc9c0 \uc54a\uc740 \uac83\uc774\ub2e4. Object De/Serialize\uc5d0\uc11c Mock-up\uac1d\uccb4\uc758 \ub2e4\ub978 \uba54\uc11c\ub4dc, \ud504\ub85c\ud37c\ud2f0\ub4e4\uc774 \ud568\uaed8 \uacb0\uacfc\uc5d0 \ud3ec\ud568 \ub420 \uc218 \uc788\uae30 \ub54c\ubb38\uc5d0 \ub370\uc774\ud130\ub97c \uc9c1\uc811 \uad6c\uc131\ud558\uac8c \ud588\ub2e4."),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-kotlin"},'@RunWith(MockitoJUnitRunner::class)\n@SpringBootTest\n@AutoConfigureMockMvc\n@TestInstance(TestInstance.Lifecycle.PER_CLASS)\nclass DashboardControllerTest {\n    ...\n    @Test\n    fun `getRegisteredApis - API Calling \ud14c\uc2a4\ud2b8 - \ub370\uc774\ud130 \uc870\ud68c`() {\n        val mockedList = mockResultList(12)\n        whenever(apiSpecRepository.getApis(1))\n                .thenReturn(mockedList);\n\n        val request = get("/api/v1/apis/1")\n                .accept(MediaType.APPLICATION_JSON);\n\n        MockMvcBuilders\n                .standaloneSetup(dashboardController)\n                .build()\n                .perform(request)\n                .andExpect(status().isOk)\n                .andDo(ResultHandler {\n                    println(it.response.contentAsString);\n                })\n                .andExpect(jsonPath("$").isArray)\n                .andExpect(jsonPath("$.*", Matchers.hasSize<ApiSpec>(12)))\n\n    }\n}\n')),(0,p.kt)("p",{parentName:"li"},"\uc870\ud68c \ud14c\uc2a4\ud2b8\uc774\ub2e4. Mock-Up \ub370\uc774\ud130\ub97c 12\uac1c (1 page \ubd84\ub7c9)\uc744 \uc900\ube44\ud574\ub450\uace0 \ud398\uc774\uc9c0 \ubc88\ud638\ub97c \uc8fc\uc5b4 \uc694\uccad\ud558\ub294 \ud14c\uc2a4\ud2b8 \uc2dc\ub098\ub9ac\uc624\uc774\ub2e4.\n\uc774\uc81c \ud14c\uc2a4\ud2b8\ub97c \uc218\ud589\ud558\uba74 \uc2e4\ud328\ud560 \uac83\uc774\ub2e4. \ucee8\ud2b8\ub864\ub7ec\uc5d0 \uac00\uc11c \ud574\ub2f9 \uae30\ub2a5\uc744 \uad6c\ud604\ud55c\ub2e4."),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-kotlin"},'@RestController\nclass DashboardController(\n        val apiSpecRepository: ApiSpecRepository\n) {\n    @GetMapping("/api/v1/apis/{page}")\n    fun getRegisteredApis(@PathVariable("page") page: Int): List<ApiSpec> = apiSpecRepository.getApis(page)\n}\n')),(0,p.kt)("p",{parentName:"li"},"Get\uc694\uccad \ud14c\uc2a4\ud2b8\ub97c \uc791\uc131\ud588\uc73c\ub2c8 GetMapping\uc744 \uad6c\uc131\ud55c\ub2e4. Restful \ub514\uc790\uc778\uc744 \uc0ac\uc6a9\ud588\ub2e4.\n\ub2e4\uc2dc \ud14c\uc2a4\ud2b8\ub97c \uc218\ud589\ud558\uba74 \ud1b5\uacfc\ud55c\ub2e4.")),(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("p",{parentName:"li"},"\ubc18\ubcf5..."),(0,p.kt)("p",{parentName:"li"},"\uc774\uc81c \uae30\ub2a5\uc744 \uac1c\ubc1c\ud560 \ub54c \ub9c8\ub2e4 \uc704 \ud750\ub984\uc744 \ubc18\ubcf5\ud558\uba74\ub41c\ub2e4. "),(0,p.kt)("ol",{parentName:"li"},(0,p.kt)("li",{parentName:"ol"},"Test Case \uc791\uc131",(0,p.kt)("ul",{parentName:"li"},(0,p.kt)("li",{parentName:"ul"},"JpaRepository",(0,p.kt)("ul",{parentName:"li"},(0,p.kt)("li",{parentName:"ul"},"\uc5b4\ub5a4 \uba54\uc11c\ub4dc\ub97c \uc0ac\uc6a9\ud574 \ub370\uc774\ud130\ub97c \uac00\uc838\uc62c \uc9c0 \uc815\ud55c\ub2e4."),(0,p.kt)("li",{parentName:"ul"},"Repository\uc5d0 \ud574\ub2f9 \uba54\uc11c\ub4dc\ub97c \uc0ac\uc6a9\ud558\ub294 \uae30\ub2a5\uc758 \uaecd\ub370\uae30\ub97c \ub9cc\ub4e0\ub2e4."),(0,p.kt)("li",{parentName:"ul"},"Repository\uc5d0 JpaRepository\uc758 Mock-Up\uc744 \uc758\uc874\uc131\uc73c\ub85c \uc8fc\uc785\ud55c\ub2e4."))),(0,p.kt)("li",{parentName:"ul"},"Repository",(0,p.kt)("ul",{parentName:"li"},(0,p.kt)("li",{parentName:"ul"},"mock-up\uc5c6\uc774, \uc2e4\uc81c \ub370\uc774\ud130\uc758 CRUD\uac00 \uc774\ub904\uc9c0\ub294\uc9c0\ub97c \ud655\uc778\ud558\ub294 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\ub97c \uc791\uc131\ud55c\ub2e4."))),(0,p.kt)("li",{parentName:"ul"},"Controller",(0,p.kt)("ul",{parentName:"li"},(0,p.kt)("li",{parentName:"ul"},"Repository\ub85c \uaebc\ub0b4\uc628 \ub370\uc774\ud130\ub97c \uc5b4\ub5bb\uac8c \ud578\ub4e4\ub9c1 \ud560 \uc9c0\uc5d0 \ub300\ud574 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\ub97c \uc791\uc131\ud55c\ub2e4."),(0,p.kt)("li",{parentName:"ul"},"\uc2e4\uc81c Request\uc640 \uc720\uc0ac\ud558\uac8c \ud14c\uc2a4\ud2b8\ud574\uc57c \ud558\ubbc0\ub85c MockMVC\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc744 \uad8c\uc7a5\ud55c\ub2e4."),(0,p.kt)("li",{parentName:"ul"},"Repository\uc758 Mock-Up\uc744 Controller\uc758 \uc758\uc874\uc131\uc73c\ub85c \uc8fc\uc785\ud55c\ub2e4."))))),(0,p.kt)("li",{parentName:"ol"},"Test \uc218\ud589"),(0,p.kt)("li",{parentName:"ol"},"Refactoring"))))),(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("p",{parentName:"li"},"\uc55e\uc73c\ub85c..."),(0,p.kt)("ol",{parentName:"li"},(0,p.kt)("li",{parentName:"ol"},"Frontend\uc640 Api\uc5f0\ub3d9.",(0,p.kt)("ul",{parentName:"li"},(0,p.kt)("li",{parentName:"ul"},"\ud604\uc7ac\uae4c\uc9c0 \uc791\uc131\ub41c Api\ub4e4\uc744 Frontend\uc640 \uc5f0\ub3d9\ud574 \uae30\ub2a5\uc758 \ub3d9\uc791\uc744 \ud655\uc778\ud55c\ub2e4."))),(0,p.kt)("li",{parentName:"ol"},"CI/CD\ud234\uacfc \uc5f0\ub3d9.",(0,p.kt)("ul",{parentName:"li"},(0,p.kt)("li",{parentName:"ul"},"Jenkins\ub85c \ubc30\uce58 \ud504\ub85c\uc138\uc2a4\ub97c \uad6c\uc131\ud574 \ud14c\uc2a4\ud2b8\ub97c \uc8fc\uae30\uc801\uc73c\ub85c, \uc790\ub3d9\ud654 \ud55c\ub2e4.")))))))}u.isMDXComponent=!0}}]);